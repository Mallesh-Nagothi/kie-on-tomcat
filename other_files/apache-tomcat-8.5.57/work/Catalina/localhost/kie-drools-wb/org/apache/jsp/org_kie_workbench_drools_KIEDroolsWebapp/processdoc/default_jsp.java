/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.57
 * Generated at: 2020-08-27 02:40:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.org_kie_workbench_drools_KIEDroolsWebapp.processdoc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class default_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"utf-8\">\n");
      out.write("    <title>Process Documentation</title>\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("    <meta name=\"description\" content=\"\">\n");
      out.write("    <meta name=\"author\" content=\"\">\n");
      out.write("\n");
      out.write("    <link href=\"");
      out.print(request.getContextPath());
      out.write("/org.jbpm.designer.jBPMDesigner/css/patternfly.min.css\" rel=\"stylesheet\" media=\"screen, print\">\n");
      out.write("    <link href=\"");
      out.print(request.getContextPath());
      out.write("/org.jbpm.designer.jBPMDesigner/css/styles.css\" rel=\"stylesheet\" media=\"screen, print\">\n");
      out.write("\n");
      out.write("    <script src=\"");
      out.print(request.getContextPath());
      out.write("/org.jbpm.designer.jBPMDesigner/lib/jquery-2.2.0.min.js\" charset=\"utf-8\"></script>\n");
      out.write("    <script src=\"");
      out.print(request.getContextPath());
      out.write("/org.jbpm.designer.jBPMDesigner/lib/html2canvas.js\" charset=\"utf-8\"></script>\n");
      out.write("    <script src=\"");
      out.print(request.getContextPath());
      out.write("/org.jbpm.designer.jBPMDesigner/lib/jspdf.min.js\" charset=\"utf-8\"></script>\n");
      out.write("    <script src=\"");
      out.print(request.getContextPath());
      out.write("/org.jbpm.designer.jBPMDesigner/lib/bootstrap.min.js\" charset=\"utf-8\"></script>\n");
      out.write("    <script src=\"");
      out.print(request.getContextPath());
      out.write("/org.jbpm.designer.jBPMDesigner/lib/patternfly.min.js\" charset=\"utf-8\"></script>\n");
      out.write("    <script src=\"");
      out.print(request.getContextPath());
      out.write("/org.jbpm.designer.jBPMDesigner/lib/handlebars-v4.0.5.js\" type=\"text/javascript\"></script>\n");
      out.write("    <script src=\"");
      out.print(request.getContextPath());
      out.write("/org.jbpm.designer.jBPMDesigner/lib/swag.min.js\" type=\"text/javascript\"></script>\n");
      out.write("    <script src=\"");
      out.print(request.getContextPath());
      out.write("/org.jbpm.designer.jBPMDesigner/js/jsonpath.js\"></script>\n");
      out.write("    <script src=\"");
      out.print(request.getContextPath());
      out.write("/org.jbpm.designer.jBPMDesigner/js/documentation/docstructure.js\"></script>\n");
      out.write("    <script>\n");
      out.write("        var ctx = \"");
      out.print(request.getContextPath());
      out.write("/org.jbpm.designer.jBPMDesigner/\";\n");
      out.write("        Swag.registerHelpers(Handlebars);\n");
      out.write("    </script>\n");
      out.write("    <style>\n");
      out.write("        .printonly {display: none;}\n");
      out.write("        @media print {\n");
      out.write("            .noprint{\n");
      out.write("                display: none !important;\n");
      out.write("            }\n");
      out.write("            .printonly {\n");
      out.write("                display: block;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        .pidiv {\n");
      out.write("            width: 520px;\n");
      out.write("            height: 350px;\n");
      out.write("            border: thin solid black;\n");
      out.write("            overflow: scroll;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .pprintdiv {\n");
      out.write("            width: 1000px;\n");
      out.write("            height: 1000px;\n");
      out.write("            overflow: scroll;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .label-pill {\n");
      out.write("            background-color:white;\n");
      out.write("            color:black;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body class=\"cards-pf\">\n");
      out.write("<div class=\"container\" id=\"pagecontainer\">\n");
      out.write("    <div class=\"row\">\n");
      out.write("        <div class=\"col-sm-9\">\n");
      out.write("            <p><div id=\"pagebuttons\" class=\"well noprint\" align=\"right\">\n");
      out.write("                <button type=\"button\" id=\"docspngbutton\" class=\"btn btn-default btn-sm\" onclick=\"createDocsPNG()\">Doc PNG</button>&nbsp;&nbsp;\n");
      out.write("                <button type=\"button\" id=\"docspdfbutton\" class=\"btn btn-default btn-sm\" onclick=\"showAsPDF()\">PDF</button>&nbsp;&nbsp;\n");
      out.write("                <button type=\"button\" id=\"docsprintbutton\" class=\"btn btn-default btn-sm\" onclick=\"window.print();\">Print</button>\n");
      out.write("            </div></p>\n");
      out.write("\n");
      out.write("            <div id=\"pagecontainercore\">\n");
      out.write("                <p><h1 class=\"page-header\" id=\"process-documentation\">Process Documentation</h1></p>\n");
      out.write("\n");
      out.write("                <h2 id=\"overview\"><span class=\"badge badge-inverse\">1.0</span> Process Overview</h2>\n");
      out.write("                <p> <h3 id=\"process-info\"><span class=\"badge badge-inverse\">1.1</span> General</h3></p>\n");
      out.write("                <p id='processinfocontent'></p>\n");
      out.write("                <p><h3 id=\"process-titals\"><span class=\"badge badge-inverse\">1.2</span> Data Totals</h3></p>\n");
      out.write("                <p id=\"processdatatotals\"></p>\n");
      out.write("                <p><h3 id=\"process-vars\"><span class=\"badge badge-inverse\">1.3</span> Variables</h3></p>\n");
      out.write("                <p id='processvarcontent'></p>\n");
      out.write("                <p><h3 id=\"process-globals\"><span class=\"badge badge-inverse\">1.4</span> Globals</h3></p>\n");
      out.write("                <p id='processglobalcontent'></p>\n");
      out.write("                <p><h3 id=\"process-imports\"><span class=\"badge badge-inverse\">1.5</span> Imports</h3></p>\n");
      out.write("                <p id='processimportcontent'></p>\n");
      out.write("\n");
      out.write("                <h2 id=\"element-details\"><span class=\"badge badge-inverse\">2.0</span> Element Details</h2>\n");
      out.write("                <p><h3 id=\"element-totals\"><span class=\"badge badge-inverse\">2.1</span> Totals</h3></p>\n");
      out.write("                <p id=\"processelementtotals\"></p>\n");
      out.write("                <p><h3 id=\"elemen-info\"><span class=\"badge badge-inverse\">2.2</span> Elements</h3></p>\n");
      out.write("                <p id=\"processelementdetails\"></p>\n");
      out.write("                </div>\n");
      out.write("\n");
      out.write("            <div class=\"noprint\" id=\"processimgdiv\">\n");
      out.write("                <h2 id=\"process-image\"><span class=\"badge badge-inverse\">3.0</span> Process Image</h2>\n");
      out.write("                <div id=\"processimgdivdisplay\" style=\"width:100%;position:relative;overflow:auto;\"></div>\n");
      out.write("                <iframe id=\"processimgdivdisplayframe\" width=\"100%\" height=\"600\"></iframe>\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("    <div class=\"row printonly\">\n");
      out.write("        <div class=\"col-sm-9 pprintdiv\" id=\"processimageprintdisplay\"></div>\n");
      out.write("    </div>\n");
      out.write("    <div id=\"processmodelimgdiv\" style=\"width:100%;\"></div>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<script id=\"elementdetailstemplate\" type=\"text/x-handlebars-template\">\n");
      out.write("    <div class=\"list-group\">\n");
      out.write("        {{#each this}}\n");
      out.write("        {{#if this.length}}\n");
      out.write("        <span class=\"list-group-item\">\n");
      out.write("            <h3 id=\"{{this.0.group}}\" class=\"list-group-item-heading\">{{this.0.groupdispname}}</h3>\n");
      out.write("            <p class=\"list-group-item-text\">\n");
      out.write("                {{#each this}}\n");
      out.write("                {{#if this.showindocumentation}}\n");
      out.write("                    <div id=\"{{id}}\" class=\"panel panel-default\">\n");
      out.write("                        <div class=\"panel-heading\"><img src=\"{{icon}}\"> <b>Name:</b> {{nodename}} <b>Type:</b> {{dispname}}  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<button type=\"button\" class=\"btn btn-secondary btn-sm\" onclick=\"showElementInModel( '{{id}}' );return false;\">View in Model</button></div>\n");
      out.write("                        <table class=\"table table-inverse\">\n");
      out.write("                            <thead>\n");
      out.write("                            <tr>\n");
      out.write("                                <th>Property Name</th>\n");
      out.write("                                <th>Property Value</th>\n");
      out.write("                            </tr>\n");
      out.write("                            </thead>\n");
      out.write("                            <tbody>\n");
      out.write("                            {{#properties}}\n");
      out.write("                            <tr>\n");
      out.write("                                <td>{{name}}</td>\n");
      out.write("                                <td>{{{newLineToBr value}}}</td>\n");
      out.write("                            </tr>\n");
      out.write("                            {{/properties}}\n");
      out.write("                            </tbody>\n");
      out.write("                        </table>\n");
      out.write("                    </div>\n");
      out.write("                {{/if}}\n");
      out.write("                {{/each}}\n");
      out.write("            </p>\n");
      out.write("        </span>\n");
      out.write("        {{/if}}\n");
      out.write("        {{/each}}\n");
      out.write("    </div>\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<script id=\"elementstotalstemplate\" type=\"text/x-handlebars-template\">\n");
      out.write("    <ul class=\"list-group\">\n");
      out.write("        {{#each this}}\n");
      out.write("        {{#if this.length}}\n");
      out.write("        <li class=\"list-group-item\">\n");
      out.write("            <img src=\"{{this.0.groupicon}}\" alt=\"{{this.0.groupdispname}}\"> {{this.0.groupdispname}}\n");
      out.write("            <span class=\"label label-default label-pill pull-xs-right\">{{this.length}}</span>\n");
      out.write("        </li>\n");
      out.write("        {{/if}}\n");
      out.write("        {{/each}}\n");
      out.write("    </ul>\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<script id=\"processtotalstemplate\" type=\"text/x-handlebars-template\">\n");
      out.write("    <ul class=\"list-group\">\n");
      out.write("        {{#processdatatotals}}\n");
      out.write("        <li class=\"list-group-item\">\n");
      out.write("            {{name}}\n");
      out.write("            <span class=\"label label-default label-pill pull-xs-right\">{{count}}</span>\n");
      out.write("        </li>\n");
      out.write("        {{/processdatatotals}}\n");
      out.write("    </ul>\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<script id=\"processinfotemplate\" type=\"text/x-handlebars-template\">\n");
      out.write("<table class=\"table table-inverse\">\n");
      out.write("    <tbody>\n");
      out.write("    {{#processinfos}}\n");
      out.write("    <tr>\n");
      out.write("        <td><b>{{name}}</b></td>\n");
      out.write("        <td>{{value}}</td>\n");
      out.write("    </tr>\n");
      out.write("    {{/processinfos}}\n");
      out.write("    </tbody>\n");
      out.write("</table>\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<script id=\"processvarsglobalstemplate\" type=\"text/x-handlebars-template\">\n");
      out.write("    <table class=\"table table-inverse\">\n");
      out.write("        <thead>\n");
      out.write("        <tr>\n");
      out.write("            <th>#</th>\n");
      out.write("            <th>Name</th>\n");
      out.write("            <th>Type</th>\n");
      out.write("            <th>KPI</th>\n");
      out.write("        </tr>\n");
      out.write("        </thead>\n");
      out.write("        <tbody>\n");
      out.write("        {{#processvarsglobals}}\n");
      out.write("        <tr>\n");
      out.write("            <th scope=\"row\">{{count}}</th>\n");
      out.write("            <td>{{name}}</td>\n");
      out.write("            <td>{{type}}</td>\n");
      out.write("            <td>{{kpi}}</td>\n");
      out.write("        </tr>\n");
      out.write("        {{/processvarsglobals}}\n");
      out.write("        </tbody>\n");
      out.write("    </table>\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<script id=\"processimportstemplate\" type=\"text/x-handlebars-template\">\n");
      out.write("    <table class=\"table table-inverse\">\n");
      out.write("        <thead>\n");
      out.write("        <tr>\n");
      out.write("            <th>#</th>\n");
      out.write("            <th>Type</th>\n");
      out.write("            <th>Class Name</th>\n");
      out.write("            <th>WSDL Location</th>\n");
      out.write("            <th>WSDL Namespace</th>\n");
      out.write("        </tr>\n");
      out.write("        </thead>\n");
      out.write("        <tbody>\n");
      out.write("        {{#processimports}}\n");
      out.write("        <tr>\n");
      out.write("            <th scope=\"row\">{{count}}</th>\n");
      out.write("            <td>{{type}}</td>\n");
      out.write("            <td>{{classname}}</td>\n");
      out.write("            <td>{{wsdllocation}}</td>\n");
      out.write("            <td>{{wsdlnamespace}}</td>\n");
      out.write("        </tr>\n");
      out.write("        {{/processimports}}\n");
      out.write("        </tbody>\n");
      out.write("    </table>\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("    function showProcessDocs() {\n");
      out.write("        // show or hide pdf doc generation button\n");
      out.write("        if(parent.ORYX.SHOWPDFDOC && parent.ORYX.SHOWPDFDOC == true) {\n");
      out.write("            $(\"#docspdfbutton\").show();\n");
      out.write("        } else {\n");
      out.write("            $(\"#docspdfbutton\").hide();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        var processJSON = parent.ORYX.EDITOR.getSerializedJSON();\n");
      out.write("        var processDataTotals = {\n");
      out.write("            \"processdatatotals\":[\n");
      out.write("            ]\n");
      out.write("        };\n");
      out.write("        showProcessGeneral(processJSON);\n");
      out.write("        processDataTotals['processdatatotals'].push({\"name\":\"Variables\",\"count\":showProcessVars(processJSON)});\n");
      out.write("        processDataTotals['processdatatotals'].push({\"name\":\"Globals\",\"count\":showProcessGlobals(processJSON)});\n");
      out.write("        processDataTotals['processdatatotals'].push({\"name\":\"Imports\",\"count\":showProcessImports(processJSON)});\n");
      out.write("        showProcessTotals(processDataTotals, processJSON);\n");
      out.write("        showProcessElementsInfo(processJSON);\n");
      out.write("        displayProcessImg();\n");
      out.write("        scrollToElement();\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function showProcessElementsInfo(processJSON) {\n");
      out.write("        var elementsInfo = processElementInfo(processJSON);\n");
      out.write("        showElementsTotals(elementsInfo, processJSON);\n");
      out.write("        showElementsDetails(elementsInfo, processJSON);\n");
      out.write("\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function showElementsDetails(elementsInfo, processJSON) {\n");
      out.write("        var elementsDetailsSource = $(\"#elementdetailstemplate\").html();\n");
      out.write("        var elementsDetailsTemplate = Handlebars.compile(elementsDetailsSource);\n");
      out.write("        $(\"#processelementdetails\").html(elementsDetailsTemplate(elementsInfo));\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function showElementsTotals(elementsInfo, processJSON) {\n");
      out.write("        var elementsTotalsSource = $(\"#elementstotalstemplate\").html();\n");
      out.write("        var elementsTotalsTemplate = Handlebars.compile(elementsTotalsSource);\n");
      out.write("        $(\"#processelementtotals\").html(elementsTotalsTemplate(elementsInfo));\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function showProcessTotals(dataTotals, processJSON) {\n");
      out.write("        var processTotalsSource = $(\"#processtotalstemplate\").html();\n");
      out.write("        var processTotalsTemplate = Handlebars.compile(processTotalsSource);\n");
      out.write("        $(\"#processdatatotals\").html(processTotalsTemplate(dataTotals));\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function showProcessGeneral(processJSON) {\n");
      out.write("        var processName = jsonPath(JSON.parse(processJSON), \"$.properties.processn\");\n");
      out.write("        var processID = jsonPath(JSON.parse(processJSON), \"$.properties.id\");\n");
      out.write("        var processPackage = jsonPath(JSON.parse(processJSON), \"$.properties.package\");\n");
      out.write("        var processExecutable = jsonPath(JSON.parse(processJSON), \"$.properties.executable\");\n");
      out.write("        var processAdHoc = jsonPath(JSON.parse(processJSON), \"$.properties.adhocprocess\");\n");
      out.write("        var processVersion = jsonPath(JSON.parse(processJSON), \"$.properties.version\");\n");
      out.write("        var processDocumentation = jsonPath(JSON.parse(processJSON), \"$.properties.documentation\");\n");
      out.write("\n");
      out.write("        var processInfoSource = $(\"#processinfotemplate\").html();\n");
      out.write("        var processInfoTemplate = Handlebars.compile(processInfoSource);\n");
      out.write("\n");
      out.write("        var processInfoData = {\n");
      out.write("            \"processinfos\":[\n");
      out.write("                {\n");
      out.write("                    \"name\":\"ID\",\"value\":processID,\"count\":\"1\"\n");
      out.write("                },\n");
      out.write("                {\n");
      out.write("                    \"name\":\"Package\",\"value\":processPackage,\"count\":\"2\"\n");
      out.write("                },\n");
      out.write("                {\n");
      out.write("                    \"name\":\"Name\", \"value\":processName,\"count\":\"3\"\n");
      out.write("                },\n");
      out.write("                {\n");
      out.write("                    \"name\":\"Is executable\",\"value\":processExecutable,\"count\":\"4\"\n");
      out.write("                },\n");
      out.write("                {\n");
      out.write("                    \"name\":\"Is AdHoc\",\"value\":processAdHoc,\"count\":\"5\"\n");
      out.write("                },\n");
      out.write("                {\n");
      out.write("                    \"name\":\"Version\",\"value\":processVersion,\"count\":\"6\"\n");
      out.write("                },\n");
      out.write("                {\n");
      out.write("                    \"name\":\"Documentation\",\"value\":processDocumentation,\"count\":\"6\"\n");
      out.write("                }\n");
      out.write("            ]\n");
      out.write("        };\n");
      out.write("\n");
      out.write("        $(\"#processinfocontent\").html(processInfoTemplate(processInfoData));\n");
      out.write("\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function showProcessVars(processJSON) {\n");
      out.write("        var processVars = jsonPath(JSON.parse(processJSON), \"$.properties.vardefs\");\n");
      out.write("        var pcount = 1;\n");
      out.write("\n");
      out.write("        if(processVars) {\n");
      out.write("            var processVarSource = $(\"#processvarsglobalstemplate\").html();\n");
      out.write("            var processVarTemplate = Handlebars.compile(processVarSource);\n");
      out.write("            var processVarData = {\n");
      out.write("                \"processvarsglobals\":[\n");
      out.write("                ]\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            processVars.forEach(function(item) {\n");
      out.write("                if(item.length > 0) {\n");
      out.write("                    var valueParts = item.split(\",\");\n");
      out.write("                    for(var i=0; i < valueParts.length; i++) {\n");
      out.write("                        var nextPart = valueParts[i];\n");
      out.write("                        if(nextPart.indexOf(\":\") > 0) {\n");
      out.write("                            var innerParts = nextPart.split(\":\");\n");
      out.write("                            if(innerParts.length == 2) {\n");
      out.write("                                if(innerParts[1] != \"false\" && innerParts[1] != \"true\") {\n");
      out.write("                                    processVarData['processvarsglobals'].push({\"name\":innerParts[0],\"type\":innerParts[1],\"kpi\":\"false\",\"count\":pcount});\n");
      out.write("                                } else {\n");
      out.write("                                    processVarData['processvarsglobals'].push({\"name\":innerParts[0],\"type\":\"no defined type\",\"kpi\":innerParts[1],\"count\":pcount});\n");
      out.write("                                }\n");
      out.write("                            } else if(innerParts.length == 3) {\n");
      out.write("                                processVarData['processvarsglobals'].push({\"name\":innerParts[0],\"type\":innerParts[1],\"kpi\":innerParts[2],\"count\":pcount});\n");
      out.write("                            }\n");
      out.write("                        } else {\n");
      out.write("                            processVarData['processvarsglobals'].push({\"name\":nextPart,\"type\":\"no defined type\",\"kpi\":\"false\",\"count\":pcount});\n");
      out.write("                        }\n");
      out.write("                        pcount++;\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            $(\"#processvarcontent\").html(processVarTemplate(processVarData));\n");
      out.write("        } else {\n");
      out.write("            $(\"#processvarcontent\").html(\"No Process Variables present\");\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        return pcount-1;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function showProcessGlobals(processJSON) {\n");
      out.write("        var processGlobals = jsonPath(JSON.parse(processJSON), \"$.properties.globals\");\n");
      out.write("        var pcount = 1;\n");
      out.write("\n");
      out.write("        if(processGlobals) {\n");
      out.write("            var processGlobalSource = $(\"#processvarsglobalstemplate\").html();\n");
      out.write("            var processGlobalTemplate = Handlebars.compile(processGlobalSource);\n");
      out.write("            var processGlobalData = {\n");
      out.write("                \"processvarsglobals\":[\n");
      out.write("                ]\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            processGlobals.forEach(function(item) {\n");
      out.write("                if(item.length > 0) {\n");
      out.write("                    var valueParts = item.split(\",\");\n");
      out.write("                    for(var i=0; i < valueParts.length; i++) {\n");
      out.write("                        var nextPart = valueParts[i];\n");
      out.write("                        if(nextPart.indexOf(\":\") > 0) {\n");
      out.write("                            var innerParts = nextPart.split(\":\");\n");
      out.write("                            processGlobalData['processvarsglobals'].push({\"name\":innerParts[0],\"type\":innerParts[1],\"kpi\":\"false\",\"count\":pcount});\n");
      out.write("                        } else {\n");
      out.write("                            processGlobalData['processvarsglobals'].push({\"name\":nextPart,\"type\":\"java.lang.String\",\"kpi\":\"false\",\"count\":pcount});\n");
      out.write("                        }\n");
      out.write("                        pcount++;\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            $(\"#processglobalcontent\").html(processGlobalTemplate(processGlobalData));\n");
      out.write("        } else {\n");
      out.write("            $(\"#processglobalcontent\").html(\"No Process Globals present\");;\n");
      out.write("        }\n");
      out.write("        return pcount-1;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function showProcessImports(processJSON) {\n");
      out.write("        var processImports = jsonPath(JSON.parse(processJSON), \"$.properties.imports\");\n");
      out.write("        var pcount = 1;\n");
      out.write("\n");
      out.write("        if(processImports) {\n");
      out.write("            var processImportSource = $(\"#processimportstemplate\").html();\n");
      out.write("            var processImportTemplate = Handlebars.compile(processImportSource);\n");
      out.write("            var processImportData = {\n");
      out.write("                \"processimports\":[\n");
      out.write("                ]\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            processImports.forEach(function(item) {\n");
      out.write("                if(item.length > 0) {\n");
      out.write("                    var valueParts = item.split(\",\");\n");
      out.write("                    for(var i=0; i < valueParts.length; i++) {\n");
      out.write("                        var nextPart = valueParts[i];\n");
      out.write("                        if(nextPart.indexOf(\"|\") > 0) {\n");
      out.write("                            var innerParts = nextPart.split(\"|\");\n");
      out.write("                            if(innerParts[1] == \"default\") {\n");
      out.write("                                processImportData['processimports'].push({\"type\":\"default\",\"classname\":innerParts[0],\"wsdllocation\":\"\",\"wsdlnamespace\":\"\",\"count\":pcount});\n");
      out.write("                            } else {\n");
      out.write("                                processImportData['processimports'].push({\"type\":\"wsdl\",\"classname\":\"\",\"wsdllocation\":innerParts[0],\"wsdlnamespace\":innerParts[1],\"count\":pcount});\n");
      out.write("                            }\n");
      out.write("                        }\n");
      out.write("                        pcount++;\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            $(\"#processimportcontent\").html(processImportTemplate(processImportData));\n");
      out.write("        } else {\n");
      out.write("            $(\"#processimportcontent\").html(\"No Process Imports present\");;\n");
      out.write("        }\n");
      out.write("        return pcount-1;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function createDocsPNG() {\n");
      out.write("        $(\"#pagenav\").hide();\n");
      out.write("        $(\"#pagebuttons\").hide();\n");
      out.write("        $(\"#processimgdiv\").hide();\n");
      out.write("        html2canvas($(\"#pagecontainer\"), {\n");
      out.write("            onrendered: function(canvas) {\n");
      out.write("                var docImage = canvas.toDataURL(\"image/png\");\n");
      out.write("                window.open(docImage);\n");
      out.write("                $(\"#pagenav\").show();\n");
      out.write("                $(\"#pagebuttons\").show();\n");
      out.write("                $(\"#processimgdiv\").show();\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("    }\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
